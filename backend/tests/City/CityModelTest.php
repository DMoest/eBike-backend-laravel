<?php

/**
 * Use strict mode.
 */
declare(strict_types=1);


/**
 * Declaration of the models namespace and use of other namespaces.
 */
namespace App\Tests;
use App\Models\City;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;


/**
 * Test cases for Bike Model Class.
 */
class CityModelTest extends TestCase
{
    use HasFactory, ProphecyTrait;

    protected object $city;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->city = new City();
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @description Test construction method for Bike class. Test instance of namespace and test default value for property faces.
     */
    final public function test_City_Model(): void
    {
        /* Test class attributes existence */
        $this->assertObjectHasAttribute("database", $this->city);
        $this->assertObjectHasAttribute("primaryKey", $this->city);
        $this->assertObjectHasAttribute("guarded", $this->city);
        $this->assertObjectHasAttribute("casts", $this->city);
        $this->assertObjectHasAttribute("fillable", $this->city);

        /* Test existence of expected class methods */
        $this->assertTrue(method_exists($this->city, "bikes"), "City Model Class does not have expected relation method for bikes.");
        $this->assertTrue(method_exists($this->city, "parkingZones"), "City Model Class does not have expected relation method for parking zones.");
        $this->assertTrue(method_exists($this->city, "stations"), "City Model Class does not have expected relation method for stations.");
        $this->assertTrue(method_exists($this->city, "travels"), "City Model Class does not have expected relation method for travels.");
        $this->assertTrue(method_exists($this->city, "users"), "City Model Class does not have expected relation method for users.");
    }


    /**
     * @test
     * @description Test if the City class model have a method for bikes relation.
     */
    final public function test_City_model_to_have_method_for_bikes_relation(): void
    {
        $city = $this->prophesize(City::class);
        $city->bikes()->shouldBeCalled();
        $city->reveal()->bikes();
    }


    /**
     * @test
     * @description Test if the City class model have a method for parking zones relation.
     */
    final public function test_City_model_to_have_method_for_Parking_zones_relation(): void
    {
        $city = $this->prophesize(City::class);
        $city->parkingZones()->shouldBeCalled();
        $city->reveal()->parkingZones();
    }


    /**
     * @test
     * @description Test if the City class model have a method for stations relation.
     */
    final public function test_City_model_to_have_method_for_stations_relation(): void
    {
        $city = $this->prophesize(City::class);
        $city->stations()->shouldBeCalled();
        $city->reveal()->stations();
    }


    /**
     * @test
     * @description Test if the City class model have a method for travels relation.
     */
    final public function test_City_model_to_have_method_for_travels_relation(): void
    {
        $city = $this->prophesize(City::class);
        $city->travels()->shouldBeCalled();
        $city->reveal()->travels();
    }


    /**
     * @test
     * @description Test if the City class model have a method for users relation.
     */
    final public function test_City_model_to_have_method_for_users_relation(): void
    {
        $city = $this->prophesize(City::class);
        $city->users()->shouldBeCalled();
        $city->reveal()->users();
    }
}
